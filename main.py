#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Application principale qui lance le bot Discord et le serveur web de statut
Syst√®me de heartbeat robuste pour maintenir l'activit√© sur Render
"""

import threading
import time
import os
import asyncio
import logging
from datetime import datetime
import signal
import sys
import random

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log', mode='a')
    ]
)
logger = logging.getLogger(__name__)

# Variables globales pour le contr√¥le
shutdown_event = threading.Event()
fatal_error_state = None
app_start_time = datetime.now()
current_bot_instance = None
bot_status_lock = threading.Lock()
fatal_error_lock = threading.Lock()  # Lock pour les erreurs fatales
bot_status_data_lock = threading.Lock()  # Lock pour bot_status data
last_fatal_error_time = None

def signal_handler(signum, frame):
    """Gestionnaire de signal pour arr√™t propre"""
    logger.info("üî¥ Signal d'arr√™t re√ßu, fermeture en cours...")
    shutdown_event.set()

signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

def run_discord_bot():
    """Lancer le bot Discord dans un thread s√©par√© avec gestion des reconnexions"""
    global fatal_error_state, current_bot_instance, last_fatal_error_time
    retry_count = 0
    base_delay = 2
    max_delay = 300  # 5 minutes max
    
    # Importer le bot une seule fois - g√©rer les erreurs dans la boucle principale
    bot_module = None
    BotConfigurationError = Exception  # Fallback en cas d'import error
    discord_module = None
    
    try:
        import bot as bot_module
        from bot import BotConfigurationError
        import discord as discord_module
    except ImportError as e:
        logger.error(f"‚ùå Erreur d'import du bot: {e}")
        with fatal_error_lock:
            fatal_error_state = f"Import error: {e}"
            last_fatal_error_time = datetime.now()
        logger.info("üîÑ Le thread Discord continue pour permettre la r√©cup√©ration automatique...")
    
    # V√©rifier la configuration - g√©rer l'erreur dans la boucle principale
    if bot_module and not bot_module.check_token():
        logger.error("‚ùå Token Discord manquant")
        with fatal_error_lock:
            fatal_error_state = "Token Discord manquant"
            last_fatal_error_time = datetime.now()
        logger.info("üîÑ Le thread Discord continue pour permettre la r√©cup√©ration automatique...")
    
    while not shutdown_event.is_set():
        try:
            # V√©rifier si on peut tenter un d√©marrage (pas d'erreur fatale ou r√©cup√©ration possible)
            with fatal_error_lock:
                current_fatal_state = fatal_error_state
                error_time = last_fatal_error_time
                
                # Tenter la r√©cup√©ration si l'erreur est ancienne
                if current_fatal_state and error_time:
                    time_since_error = (datetime.now() - error_time).total_seconds()
                    if time_since_error > 600:  # 10 minutes
                        logger.info(f"üîÑ Tentative de r√©cup√©ration apr√®s {time_since_error:.0f}s: {current_fatal_state}")
                        # Tenter de r√©importer et reconfigurer
                        try:
                            logger.info("üîç Test de r√©cup√©ration avec validation compl√®te...")
                            # √âtape 1: R√©importer si n√©cessaire
                            if "Import error" in current_fatal_state:
                                import bot as bot_module
                                from bot import BotConfigurationError as LocalBotConfigurationError
                                import discord as discord_module
                                logger.info("‚úÖ R√©-import du bot r√©ussi")
                            
                            # √âtape 2: Validation compl√®te avec preflight check
                            if bot_module and discord_module:
                                if not bot_module.check_token():
                                    logger.info("‚ùå Token toujours manquant")
                                else:
                                    # √âtape 3: Test de cr√©ation et connexion (preflight)
                                    try:
                                        test_bot = bot_module.create_bot()
                                        logger.info("‚úÖ Cr√©ation du bot r√©ussie")
                                        
                                        # Test de login rapide sans run complet
                                        import asyncio
                                        async def test_login():
                                            await test_bot.login(bot_module.TOKEN)
                                            await test_bot.close()
                                        
                                        # Ex√©cuter le test de login
                                        asyncio.run(test_login())
                                        logger.info("‚úÖ Test de connexion Discord r√©ussi")
                                        
                                        # Si on arrive ici, tout est bon - clear l'erreur fatale
                                        fatal_error_state = None
                                        last_fatal_error_time = None
                                        retry_count = 0
                                        logger.info("‚ú® R√©cup√©ration automatique r√©ussie - tous les tests pass√©s!")
                                        
                                    except Exception as preflight_error:
                                        logger.warning(f"‚ùå Test de connexion √©chou√©: {preflight_error}")
                            else:
                                logger.info("‚ùå Modules toujours non disponibles")
                                
                        except Exception as recovery_error:
                            logger.warning(f"‚ö†Ô∏è √âchec de la r√©cup√©ration: {recovery_error}")
                            
                current_fatal_state = fatal_error_state
                
            # Si on a encore une erreur fatale, attendre avant de r√©essayer
            if current_fatal_state:
                logger.info(f"‚è≥ Attente (erreur fatale active): {current_fatal_state}")
                for _ in range(30):  # Attendre 30 secondes
                    if shutdown_event.is_set():
                        break
                    time.sleep(1)
                continue
                
            # Essayer de d√©marrer le bot si tout est OK
            if not bot_module or not discord_module:
                raise Exception("Modules bot ou discord non disponibles")
                
            logger.info(f"ü§ñ D√©marrage du bot Discord (tentative {retry_count + 1})...")
            
            # Cr√©er une nouvelle instance du bot pour chaque tentative
            with bot_status_lock:
                current_bot_instance = bot_module.create_bot()
            
            # Lancer le bot
            current_bot_instance.run(bot_module.TOKEN, reconnect=True)
            
        except BotConfigurationError as e:
            logger.error(f"‚ùå Erreur de configuration fatale: {e}")
            with fatal_error_lock:
                fatal_error_state = f"Configuration error: {e}"
                last_fatal_error_time = datetime.now()
            # Ne pas break - continuer la boucle pour permettre la r√©cup√©ration automatique
            logger.info("üîÑ Attente de la r√©cup√©ration automatique (10 minutes)...")
            
        except Exception as e:
            # Capturer les erreurs Discord et autres (y compris LoginFailure)
            error_type = type(e).__name__
            if error_type == 'LoginFailure':
                logger.error(f"‚ùå Token Discord invalide: {e}")
                with fatal_error_lock:
                    fatal_error_state = f"Invalid token: {e}"
                    last_fatal_error_time = datetime.now()
                logger.info("üîÑ Attente de la r√©cup√©ration automatique (10 minutes)...")
            else:
                retry_count += 1
                error_type = type(e).__name__
                
            logger.error(f"‚ùå Erreur lors du d√©marrage du bot Discord ({error_type}): {e}")
            
            if shutdown_event.is_set():
                break
                
            # Backoff exponentiel avec jitter
            wait_time = min(base_delay * (2 ** min(retry_count, 8)), max_delay)
            jitter = random.uniform(0.8, 1.2)  # Jitter de ¬±20%
            wait_time = wait_time * jitter
            
            logger.info(f"‚è≥ Nouvelle tentative dans {wait_time:.1f} secondes...")
            
            # Ne pas clear l'erreur fatale ici - laisse la logique principale s'en occuper
            # La r√©cup√©ration valid√©e se fait au d√©but de la boucle principale
                        
            # Attendre avec v√©rification d'arr√™t
            for _ in range(int(wait_time)):
                if shutdown_event.is_set():
                    break
                time.sleep(1)
        finally:
            # Nettoyer la r√©f√©rence du bot
            with bot_status_lock:
                current_bot_instance = None
                
    logger.info("üî¥ Thread Discord arr√™t√©")


def run_web_server():
    """Lancer le serveur web Flask avec endpoints de sant√©"""
    try:
        from flask import Flask, render_template_string, jsonify
        # Ne pas importer bot ici - utiliser les r√©f√©rences globales pour √©viter les √©checs de Flask
        
        app = Flask(__name__)
        
        # Configuration Flask pour √©viter le cache
        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0
        
# Variables globales pour le statut
        bot_status = {
            'online': False,
            'first_online_time': None,
            'offline_since': None,
            'bot_name': 'Bot Discord',
            'servers': 0,
            'last_update': None,
            'reconnect_count': 0
        }

        # Template HTML am√©lior√© avec design responsive
        HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Statut du Bot Discord - Heartbeat Actif</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .container {
            background: white;
            border-radius: 15px;
            padding: 40px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.3);
            text-align: center;
            max-width: 600px;
            width: 100%;
        }
        
        .status-indicator {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 10px;
            animation: pulse 2s infinite;
        }
        
        .online {
            background-color: #4CAF50;
            box-shadow: 0 0 0 0 rgba(76, 175, 80, 1);
        }
        
        .offline {
            background-color: #f44336;
            box-shadow: 0 0 0 0 rgba(244, 67, 54, 1);
        }
        
        @keyframes pulse {
            0% {
                transform: scale(0.95);
                box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.7);
            }
            70% {
                transform: scale(1);
                box-shadow: 0 0 0 10px rgba(76, 175, 80, 0);
            }
            100% {
                transform: scale(0.95);
                box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);
            }
        }
        
        h1 {
            color: #333;
            margin-bottom: 30px;
            font-size: 2em;
        }
        
        .status-text {
            font-size: 24px;
            font-weight: bold;
            margin: 20px 0;
        }
        
        .online-text {
            color: #4CAF50;
        }
        
        .offline-text {
            color: #f44336;
        }
        
        .info {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 25px;
            margin: 25px 0;
            border-left: 4px solid #667eea;
        }
        
        .info-item {
            margin: 12px 0;
            color: #666;
            font-size: 16px;
        }
        
        .bot-icon {
            font-size: 80px;
            margin-bottom: 20px;
            filter: drop-shadow(0 4px 8px rgba(0,0,0,0.1));
        }
        
        .refresh-button {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 20px;
            transition: all 0.3s;
        }
        
        .refresh-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .heartbeat-indicator {
            color: #e74c3c;
            font-size: 18px;
            animation: heartbeat 1.5s ease-in-out infinite;
        }
        
        @keyframes heartbeat {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        .footer {
            margin-top: 30px;
            color: #888;
            font-size: 14px;
        }
    </style>
    <script>
        // Auto-refresh toutes les 30 secondes
        setTimeout(() => {
            location.reload();
        }, 30000);
        
        function refreshNow() {
            location.reload();
        }
        
        // Indicateur visuel du heartbeat
        function updateHeartbeat() {
            const heartbeat = document.querySelector('.heartbeat-indicator');
            if (heartbeat) {
                heartbeat.style.color = heartbeat.style.color === 'rgb(231, 76, 60)' ? '#e74c3c' : 'rgb(231, 76, 60)';
            }
        }
        
        setInterval(updateHeartbeat, 1000);
    </script>
</head>
<body>
    <div class="container">
        <div class="bot-icon">ü§ñ</div>
        <h1>Bot Discord - Monitoring</h1>
        <div class="heartbeat-indicator">‚ù§Ô∏è Heartbeat Actif</div>
        
        {% if status.online %}
            <div class="status-indicator online"></div>
            <div class="status-text online-text">‚úÖ Bot en ligne et actif</div>
        {% else %}
            <div class="status-indicator offline"></div>
            <div class="status-text offline-text">‚ùå Bot temporairement hors ligne</div>
        {% endif %}
        
        <div class="info">
            {% if status.online %}
                <div class="info-item">
                    <strong>ü§ñ Nom du bot:</strong> {{ status.bot_name }}
                </div>
                <div class="info-item">
                    <strong>üöÄ D√©marr√© le:</strong> {{ status.start_time }}
                </div>
                <div class="info-item">
                    <strong>üè∞ Serveurs connect√©s:</strong> {{ status.servers }}
                </div>
                {% if status.uptime %}
                    <div class="info-item">
                        <strong>‚è∞ Temps d'activit√©:</strong> {{ status.uptime }}
                    </div>
                {% endif %}
                {% if status.reconnect_count > 0 %}
                    <div class="info-item">
                        <strong>üîÑ Reconnexions:</strong> {{ status.reconnect_count }}
                    </div>
                {% endif %}
            {% else %}
                <div class="info-item">
                    <strong>‚ö†Ô∏è Le bot Discord red√©marre automatiquement...</strong>
                </div>
                <div class="info-item">
                    <strong>üîÑ Syst√®me de heartbeat maintient l'activit√©</strong>
                </div>
            {% endif %}
            
            <div class="info-item">
                <strong>üîÑ Derni√®re v√©rification:</strong> {{ status.last_update }}
            </div>
        </div>
        
        <button class="refresh-button" onclick="refreshNow()">
            üîÑ Actualiser le statut
        </button>
        
        <div class="footer">
            <p>üîß Optimis√© pour Render | üì° Heartbeat automatique</p>
        </div>
    </div>
</body>
</html>
        """

        def calculate_uptime(start_time):
            """Calculer le temps de fonctionnement"""
            if not start_time:
                return None
            
            now = datetime.now()
            uptime = now - start_time
            
            hours = int(uptime.total_seconds() // 3600)
            minutes = int((uptime.total_seconds() % 3600) // 60)
            
            if hours > 0:
                return f"{hours}h {minutes}m"
            else:
                return f"{minutes}m"

        def update_bot_status():
            """Mettre √† jour le statut du bot avec r√©cup√©ration automatique des erreurs fatales"""
            nonlocal bot_status
            global fatal_error_state, current_bot_instance, last_fatal_error_time
            
            try:
                # Lire l'√©tat d'erreur fatale (lecture seule - le bot thread g√®re les clears)
                with fatal_error_lock:
                    current_fatal_state = fatal_error_state
                
                # Prot√©ger toutes les modifications de bot_status avec le lock
                with bot_status_data_lock:
                    # V√©rifier s'il y a une erreur fatale
                    if current_fatal_state:
                        if bot_status['online']:
                            bot_status['offline_since'] = datetime.now()
                            logger.warning("‚ö†Ô∏è Bot mis hors ligne √† cause d'une erreur fatale")
                        bot_status['online'] = False
                        bot_status['bot_name'] = f'Bot Discord (Erreur fatale: {current_fatal_state})'
                        bot_status['servers'] = 0
                    else:
                        # V√©rifier le statut du bot en utilisant la r√©f√©rence globale thread-safe
                        with bot_status_lock:
                            bot_instance = current_bot_instance
                        
                        if bot_instance and bot_instance.is_ready():
                            if not bot_status['online']:
                                now = datetime.now()
                                if not bot_status['first_online_time']:
                                    bot_status['first_online_time'] = now
                                bot_status['offline_since'] = None
                                logger.info("‚úÖ Bot d√©tect√© comme en ligne")
                            
                            bot_status['online'] = True
                            bot_status['bot_name'] = str(bot_instance.user) if bot_instance.user else 'Bot Discord'
                            bot_status['servers'] = len(bot_instance.guilds) if bot_instance.guilds else 0
                        else:
                            if bot_status['online']:
                                bot_status['offline_since'] = datetime.now()
                                logger.warning("‚ö†Ô∏è Bot d√©tect√© comme hors ligne")
                                bot_status['reconnect_count'] += 1
                            elif not bot_status['offline_since']:
                                # Si jamais en ligne et offline_since pas d√©fini
                                bot_status['offline_since'] = app_start_time
                                
                            bot_status['online'] = False
                            bot_status['bot_name'] = 'Bot Discord'
                            bot_status['servers'] = 0
                    
                    bot_status['last_update'] = datetime.now().strftime("%H:%M:%S")
                    
            except Exception as e:
                logger.error(f"Erreur lors de la mise √† jour du statut: {e}")
                with bot_status_data_lock:
                    if bot_status['online']:
                        bot_status['offline_since'] = datetime.now()
                    bot_status['online'] = False

        @app.route('/')
        def status_page():
            """Page principale avec le statut du bot"""
            update_bot_status()
            
            # Lire bot_status de fa√ßon thread-safe
            with bot_status_data_lock:
                # Calculer le temps de fonctionnement
                uptime = calculate_uptime(bot_status['first_online_time'])
                status_with_uptime = bot_status.copy()
                status_with_uptime['uptime'] = uptime
                
                if status_with_uptime['first_online_time']:
                    status_with_uptime['start_time'] = status_with_uptime['first_online_time'].strftime("%d/%m/%Y √† %H:%M:%S")
                else:
                    status_with_uptime['start_time'] = None
            
            return render_template_string(HTML_TEMPLATE, status=status_with_uptime)

        @app.route('/health')
        def health_check():
            """Endpoint de sant√© pour les services comme Render avec r√©cup√©ration d'erreurs"""
            update_bot_status()
            
            # Obtenir l'√©tat d'erreur fatale de fa√ßon thread-safe
            with fatal_error_lock:
                current_fatal_state = fatal_error_state
                error_time = last_fatal_error_time
            
            # Grace period for startup (2 minutes)
            grace_period = 120
            now = datetime.now()
            
            # Calculer le temps depuis le d√©marrage de l'app
            app_runtime = (now - app_start_time).total_seconds()
            
            # Lire bot_status de fa√ßon thread-safe
            with bot_status_data_lock:
                bot_online = bot_status['online']
                offline_since = bot_status['offline_since']
            
            # Calculer la dur√©e hors ligne
            if offline_since:
                offline_duration = (now - offline_since).total_seconds()
            else:
                offline_duration = 0
            
            # V√©rifier s'il y a une erreur fatale
            if current_fatal_state:
                return jsonify({
                    'status': 'unhealthy',
                    'bot_online': False,
                    'timestamp': now.isoformat(),
                    'error': f'Fatal error: {current_fatal_state}',
                    'app_runtime': app_runtime,
                    'fatal': True,
                    'error_time': error_time.isoformat() if error_time else None
                }), 503
            
            # Retourner 503 si le bot est hors ligne au-del√† de la p√©riode de gr√¢ce
            if not bot_online and offline_duration > grace_period:
                return jsonify({
                    'status': 'unhealthy',
                    'bot_online': False,
                    'timestamp': now.isoformat(),
                    'error': f'Bot offline for {offline_duration:.0f}s (grace: {grace_period}s)',
                    'offline_duration': offline_duration,
                    'app_runtime': app_runtime
                }), 503
            
            # Retourner 200 si le bot est en ligne ou dans la p√©riode de gr√¢ce
            return jsonify({
                'status': 'healthy',
                'bot_online': bot_online,
                'timestamp': now.isoformat(),
                'heartbeat': True,
                'offline_duration': offline_duration,
                'app_runtime': app_runtime,
                'service': 'discord-bot-heartbeat'
            }), 200

        @app.route('/api/status')
        def api_status():
            """API JSON pour le statut du bot"""
            update_bot_status()
            with bot_status_data_lock:
                return jsonify(bot_status.copy())
        
        @app.route('/ready')
        def readiness_check():
            """Endpoint de pr√©paration - v√©rifie si le service est pr√™t"""
            update_bot_status()
            with bot_status_data_lock:
                bot_online = bot_status['online']
            
            if bot_online:
                return jsonify({
                    'status': 'ready',
                    'bot_online': True,
                    'timestamp': datetime.now().isoformat()
                }), 200
            else:
                return jsonify({
                    'status': 'not_ready',
                    'bot_online': False,
                    'timestamp': datetime.now().isoformat()
                }), 503

        @app.route('/ping')
        def ping():
            """Endpoint simple pour v√©rifier que le service r√©pond"""
            return jsonify({
                'message': 'pong',
                'timestamp': datetime.now().isoformat(),
                'service': 'active'
            }), 200

        # Configuration pour √©viter le cache
        @app.after_request
        def after_request(response):
            response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
            response.headers["Pragma"] = "no-cache"
            response.headers["Expires"] = "0"
            return response
        
        # D√©marrer le serveur web avec Waitress (production WSGI)
        port = int(os.environ.get('PORT', 5000))
        logger.info(f"üåê D√©marrage du serveur web de production sur le port {port}...")
        
        try:
            from waitress import serve
            serve(app, host='0.0.0.0', port=port, threads=4, cleanup_interval=30, 
                 connection_limit=1000, channel_timeout=120)
        except ImportError:
            logger.warning("‚ö†Ô∏è Waitress non disponible, utilisation du serveur de d√©veloppement Flask")
            app.run(host='0.0.0.0', port=port, debug=False, threaded=True)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du d√©marrage du serveur web: {e}")
        sys.exit(1)

def main():
    """Fonction principale qui lance les deux services"""
    logger.info("üöÄ D√©marrage de l'application compl√®te avec syst√®me de heartbeat...")
    
    try:
        # Lancer le bot Discord dans un thread s√©par√©
        discord_thread = threading.Thread(target=run_discord_bot, daemon=True)
        discord_thread.start()
        logger.info("üì± Thread Discord lanc√©")
        
        # Attendre un peu pour que le bot se lance
        time.sleep(3)
        
        # Lancer le serveur web (bloquant)
        logger.info("üåê Lancement du serveur web Flask...")
        run_web_server()
        
    except KeyboardInterrupt:
        logger.info("üî¥ Arr√™t demand√© par l'utilisateur")
        shutdown_event.set()
    except Exception as e:
        logger.error(f"‚ùå Erreur critique dans l'application principale: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
